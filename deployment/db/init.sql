-- ========================================
-- Create Role and Database if Not Exists
-- ========================================
DO $$
BEGIN
   IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'myuser') THEN
      CREATE ROLE myuser WITH LOGIN PASSWORD 'mypassword';
   END IF;

   IF NOT EXISTS (SELECT FROM pg_database WHERE datname = 'userdb') THEN
      CREATE DATABASE userdb OWNER myuser;
   END IF;
END $$;




-- ========================================
-- Create "roles_p2p" Table and Seed Data
-- ========================================
DO $$
BEGIN
   IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'roles_p2p') THEN
      CREATE TABLE roles_p2p (
         id BIGINT PRIMARY KEY,
         name VARCHAR(255) NOT NULL
      );
   END IF;

   IF NOT EXISTS (SELECT 1 FROM roles_p2p WHERE name = 'ROLE_ADMIN') THEN
      INSERT INTO roles_p2p (id, name) VALUES (1, 'ROLE_ADMIN');
   END IF;

   IF NOT EXISTS (SELECT 1 FROM roles_p2p WHERE name = 'ROLE_FREE_USER') THEN
      INSERT INTO roles_p2p (id, name) VALUES (2, 'ROLE_FREE_USER');
   END IF;

   IF NOT EXISTS (SELECT 1 FROM roles_p2p WHERE name = 'ROLE_SUBSCRIBED_USER') THEN
      INSERT INTO roles_p2p (id, name) VALUES (3, 'ROLE_SUBSCRIBED_USER');
   END IF;
END $$;


-- ========================================
-- Create "interview_levels" Table
-- ========================================
DO $$
BEGIN
   IF NOT EXISTS (SELECT 1 FROM information_schema.tables 
                  WHERE table_name = 'interview_levels') THEN
      CREATE TABLE interview_levels (
         id SERIAL PRIMARY KEY,
         level VARCHAR(50) NOT NULL,
         description TEXT
      );
   END IF;
END $$;
-- ========================================
-- Seed Data for Interview Levels
-- ========================================
INSERT INTO interview_levels (id, level, description)
VALUES
  (1, 'Beginner', 'Covers basic concepts, ideal for entry-level candidates.'),
  (2, 'Intermediate', 'Covers moderately complex topics for mid-level candidates.'),
  (3, 'Advanced', 'Focuses on advanced and expert-level concepts.');




-- ========================================
-- Create "interview_types" Table
-- ========================================
DO $$
BEGIN
   IF NOT EXISTS (SELECT 1 FROM information_schema.tables 
                  WHERE table_name = 'interview_types') THEN
      CREATE TABLE interview_types (
         id INTEGER PRIMARY KEY,
         type VARCHAR(255) NOT NULL,
         description TEXT,
         duration_minutes INTEGER
      );
   END IF;
END $$;


-- ========================================
-- Seed Data for Interview Types
-- ========================================
INSERT INTO interview_types (id, type, description, duration_minutes)
VALUES
  (1, 'Behavioral', 'Focuses on assessing soft skills, past experiences, and cultural fit.', 45),
  (2, 'Software Engineering', 'Evaluates technical knowledge, problem-solving, and coding skills.', 60); 




-- ========================================
-- Seed Data for Interview Types
-- ========================================
INSERT INTO interview_types (id, type, description, duration_minutes)
VALUES
  (1, 'Behavioral', 'Focuses on assessing soft skills, past experiences, and cultural fit.', 45),
  (2, 'Software Engineering', 'Evaluates technical knowledge, problem-solving, and coding skills.', 60)
ON CONFLICT (id) DO NOTHING;

-- ========================================
-- Create "interview_status" Table
-- ========================================
DO $$
BEGIN
   IF NOT EXISTS (SELECT 1 FROM information_schema.tables 
                  WHERE table_name = 'interview_status') THEN
      CREATE TABLE interview_status (
         status_id INTEGER PRIMARY KEY,
         status_name VARCHAR(50) NOT NULL UNIQUE
      );
   END IF;
END $$;

-- ========================================
-- Seed Data for Interview Status
-- ========================================
INSERT INTO interview_status (status_id, status_name)
VALUES
  (1, 'UPCOMING'),
  (2, 'WAITING_TO_JOIN'),
  (3, 'IN_PROGRESS'),
  (4, 'END'),
  (5, 'DID_NOT_JOIN'),
  (6, 'INTERRUPTED'),
  (7, 'INTERRUPTED_BY_PEER'),
  (8, 'UNMATCHED')
ON CONFLICT (status_id) DO NOTHING;




-- ========================================
-- Create "interview_type_times" Table and Seed Data
-- ========================================
CREATE TABLE IF NOT EXISTS public.interview_type_times
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    "time" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    interview_type_id INTEGER NOT NULL, -- Changed to INTEGER to match interview_types.id
    CONSTRAINT interview_type_times_pkey PRIMARY KEY (id),
    CONSTRAINT uk7e8jldu623m3g5p3gy2etxrpn UNIQUE (interview_type_id, "time"),
    CONSTRAINT fkowpuwafpre8532lw55y0ukop6 FOREIGN KEY (interview_type_id)
        REFERENCES public.interview_types (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.interview_type_times
    OWNER to myuser;

GRANT ALL ON TABLE public.interview_type_times TO myuser;

-- ========================================
-- Seed Data for Interview Type Times
-- ========================================
WITH time_intervals AS (
    SELECT 
        row_number() OVER () AS id,
        to_char((t || ' minutes')::interval, 'HH24:MI:SS') || 'Z' AS "time"
    FROM generate_series(0, 1435, 5) AS t
)
INSERT INTO interview_type_times (id, "time", interview_type_id)
SELECT 
    id, "time", 1 FROM time_intervals
UNION ALL
SELECT 
    id + (1440 / 5), "time", 2 FROM time_intervals
ON CONFLICT (id) DO NOTHING;





-- ========================================
-- Grant Ownership of All Tables to myuser
-- ========================================
DO $$
DECLARE
    rec RECORD;
BEGIN
    -- Change ownership of all tables in the public schema to myuser
    FOR rec IN
        SELECT tablename
        FROM pg_tables
        WHERE schemaname = 'public'
    LOOP
        EXECUTE format('ALTER TABLE public.%I OWNER TO myuser;', rec.tablename);
    END LOOP;

    -- Change ownership of all sequences in the public schema to myuser
    FOR rec IN
        SELECT sequencename
        FROM pg_sequences
        WHERE schemaname = 'public'
    LOOP
        EXECUTE format('ALTER SEQUENCE public.%I OWNER TO myuser;', rec.sequencename);
    END LOOP;

    -- Change ownership of the public schema to myuser
    EXECUTE 'ALTER SCHEMA public OWNER TO myuser;';
END $$;




-- -- ========================================
-- -- Seed Data for Users
-- -- ========================================
-- INSERT INTO users (
--     id, avatar_url, created_at, date_of_birth, email, email_verification_token,
--     first_name, is_email_verified, language, last_login_at, last_name,
--     password_hash, password_reset_expires_at, password_reset_token,
--     relevant_work_experience, timezone, university_major, university_name,
--     updated_at, username
-- )
-- VALUES
--   (61, NULL, '2024-12-03 01:01:21.997395', NULL, 'himanshu@gmail.com', NULL,
--    NULL, FALSE, 'en', NULL, NULL, '$2a$10$aLJIKkD0WRLfauQ4MAWreeUoVMLABhSbhui.9ODjMArgawomCe2Vi',
--    NULL, NULL, 1, 'UTC', 'Computer Science', 'New York University', '2024-12-03 01:01:21.997395', 'himanshu'),
--   (62, NULL, '2024-12-03 01:01:52.329132', NULL, 'niraj@gmail.com', NULL,
--    NULL, FALSE, 'en', NULL, NULL, '$2a$10$B7S/hjNk8J8CKjxTPtljAefYGO8EnwmU.pxMy3vLTGYmq/2mDYAQO',
--    NULL, NULL, 1, 'UTC', 'Computer Science', 'New York University', '2024-12-03 01:01:52.329132', 'niraj'),
--   (63, NULL, '2024-12-03 01:03:45.900985', NULL, 'deepjyot@gmail.com', NULL,
--    NULL, FALSE, 'en', NULL, NULL, '$2a$10$JicjssC0QNJQx4cwcqr8TOIFOaGGEm1OjmsRr17Eg1TOFI2GlJdUu',
--    NULL, NULL, 2, 'UTC', 'Computer Science', 'New York University', '2024-12-03 01:03:45.900985', 'deepjyot')
-- ON CONFLICT (id) DO NOTHING;



-- -- ========================================
-- -- Seed Data for User Roles
-- -- ========================================
-- INSERT INTO user_roles (id, role_id, user_id)
-- VALUES
--   (1, 1, 61), -- Himanshu as ROLE_ADMIN
--   (2, 2, 61), -- Himanshu as ROLE_FREE_USER
--   (3, 2, 62), -- Niraj as ROLE_FREE_USER
--   (4, 3, 63), -- Deepjyot as ROLE_SUBSCRIBED_USER
--   (5, 2, 63)  -- Deepjyot also as ROLE_FREE_USER
-- ON CONFLICT (id) DO NOTHING;
